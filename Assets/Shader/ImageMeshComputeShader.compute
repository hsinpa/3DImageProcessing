// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GetMesh

Texture2D<float4> MainTex;
Texture2D<float4> DepthTex;

uniform int TexWidth;

RWStructuredBuffer<float3> PositionBuffer;
RWStructuredBuffer<float4> ColorBuffer;
RWStructuredBuffer<int> IndicesBuffer;
RWStructuredBuffer<int> TriangleBuffer;
RWStructuredBuffer<float3> NormalBuffer;


void SetTriangle(int index, int x, int y) {
    if (y == TexWidth-1 || x == TexWidth-1) return;

    int ti = index * 6;

    TriangleBuffer[ti] = index;
    TriangleBuffer[ti + 3] = TriangleBuffer[ti + 2] = index + 1;
    TriangleBuffer[ti + 4] = TriangleBuffer[ti + 1] = index + TexWidth + 1;
    TriangleBuffer[ti + 5] = index + TexWidth + 2;
}

[numthreads(16,16,1)]
void GetMesh (uint2 id : SV_DispatchThreadID)
{
    int index = (TexWidth * id.y) + id.x;

    float offSet = TexWidth * 0.5;
    float pixelScale = 0.01;

    ColorBuffer[index] = float4(MainTex[id.xy].x, MainTex[id.xy].y, MainTex[id.xy].z, 1);

    PositionBuffer[index] = float3(id.xy * pixelScale, (1-DepthTex[id.xy].x) * 2);
    //1-DepthTex[id.xy].x);

    IndicesBuffer[index] =index;

    //SetTriangle(index, id.x, id.y);
    //NormalBuffer[index] = float3(0.0, 1.0, 0.0);
}